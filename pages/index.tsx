import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { prismaClient } from "../lib/prisma";
import { User, UserPlace } from '@prisma/client';

type Player = {
  id: number,
  name: string,
}

type Place = {
  x: number,
  y: number,
}

export type Props = {
  you: [Player,Place],
  others: [Player,Place][],
} | {
  you: null
}

const Home: NextPage<Props> = (props) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <code>
          {JSON.stringify(props)}
        </code>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home

const NEAR = 100;

const getOthers = async (yourId: number,{x,y}: Place): Promise<[Player,Place][]> => {
  const result = await prismaClient.userPlace.findMany({
    where: {
      AND: [
        { y: { lte: y + NEAR, } },
        { y: { gte: y - NEAR, } }, 
        { x: { lte: x + NEAR, } }, 
        { x: { gte: x - NEAR, } },
        {
          NOT: {
            userId: yourId,
          }
        }
      ],
    },
    include: {
      user: true,
    }
  });
  return result.map<[Player,Place]>(place => [userToViewModel(place.user), placeToViewModel(place)])
}

const placeToViewModel = (place: UserPlace): Place => {
  return {
    x: place.x,
    y: place.y,
  }
}

const userToViewModel = (user: User): Player => {
  return {
    id: user.id,
    name: user.name,
  }
}


export const getServerSideProps: GetServerSideProps<Props> = async (context) => {
  // TODO: 認証
  const yourPlace = await prismaClient.userPlace.findFirst({
    include: {
      user: true,
    }
  })
  if(!yourPlace){
    return {
      props: { you: null },
    }
  }
  const you = yourPlace.user;
  return {
    props: {
      you: [userToViewModel(you), placeToViewModel(yourPlace)
    ],
    others: await getOthers(you.id,yourPlace),
    }
  }
}